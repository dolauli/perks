import { Dictionary } from '../common/dictionary';
import { Url } from '../common/uri';
import { VendorExtensions } from '../common/vendor-extensions';
import { ParameterLocation } from './parameter-location';


/**
 * Lists the required security schemes to execute this operation. The name used for each property MUST correspond to a security scheme declared in the Security Schemes under the Components Object.
 * 
 * Security Requirement Objects that contain multiple schemes require that all schemes MUST be satisfied for a request to be authorized. This enables support for scenarios where multiple query parameters or HTTP headers are required to convey security information.
 * 
 * When a list of Security Requirement Objects is defined on the OpenAPI Object or Operation Object, only one of the Security Requirement Objects in the list needs to be satisfied to authorize the request.
 * 
 * @see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#security-requirement-object
 */
export type SecurityRequirement = Dictionary<Array<string>>;

export enum SecurityType {
  ApiKey = 'apiKey',
  Http = 'http',
  OAuth2 = 'oauth2',
  OpenIdConnect = 'openIdConnect'
}

export type SecurityScheme = ApiKeySecurityScheme | OAuth2SecurityScheme | OpenIdConnectSecurityScheme | HttpSecurityScheme;

/** 
 * defines a security scheme that can be used by the operations. Supported schemes are HTTP authentication, an API key (either as a header, a cookie parameter or as a query parameter), OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect Discovery.
 * 
 * @see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#security-scheme-object 
 */
export interface SecuritySchemeBase extends VendorExtensions {
  /** The type of the security scheme. */
  type: SecurityType;

  /** A short description for security scheme. CommonMark syntax MAY be used for rich text representation. */
  description?: string;
}

/**
 * defines an ApiKey security scheme that can be used by the operations
 */
export interface ApiKeySecurityScheme extends SecuritySchemeBase {
  /** ApiKey */
  type: SecurityType.ApiKey;

  /** The name of the header, query or cookie parameter to be used. */
  name: string;

  /** The location of the API key. */
  in: ParameterLocation.Cookie | ParameterLocation.Header | ParameterLocation.Query;
}

/**
 * defines an Http security scheme that can be used by the operations
 */
export interface HttpSecurityScheme extends SecuritySchemeBase {
  /** HTTP */
  type: SecurityType.Http;

  /** he name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235. */
  scheme: string;

  /** A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes. */
  bearerFormat?: string;
}

/**
 * defines an OAuth2 security scheme that can be used by the operations
 */
export interface OAuth2SecurityScheme extends SecuritySchemeBase {
  /* OAuth2 */
  type: SecurityType.OAuth2;

  /** An object containing configuration information for the flow types supported. */
  flows: OAuthFlows;
}

/**
 * Allows configuration of the supported OAuth Flows.
 * 
 * @see https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#oauthFlowsObject
 */
export interface OAuthFlows extends VendorExtensions {
  /** Configuration for the OAuth Implicit flow */
  implicit?: ImplicitOAuthFlow;

  /** Configuration for the OAuth Resource Owner Password flow */
  password?: PasswordOAuthFlow;

  /** Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0. */
  clientCredentials?: ClientCredentialsFlow;

  /** Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0. */
  authorizationCode?: AuthorizationCodeOAuthFlow;
}

/** Common definition for the OAuth flows */
export interface OAuth2Flow extends VendorExtensions {
  /** The URL to be used for obtaining refresh tokens. This MUST be in the form of a URL. */
  refreshUrl?: Url;

  /** The available scopes for the OAuth2 security scheme. A map between the scope name and a short description for it. */
  scopes: Dictionary<string>;
}

/** Configuration for the OAuth Client Credentials flow. Previously called application in OpenAPI 2.0. */
export interface ClientCredentialsFlow extends OAuth2Flow {
  /** The token URL to be used for this flow. This MUST be in the form of a URL. */
  tokenUrl: Url;
}

/** Configuration for the OAuth Resource Owner Password flow */
export interface PasswordOAuthFlow extends OAuth2Flow {
  /** The token URL to be used for this flow. This MUST be in the form of a URL. */
  tokenUrl: Url;
}

/** Configuration for the OAuth Implicit flow */
export interface ImplicitOAuthFlow extends OAuth2Flow {
  /** The authorization URL to be used for this flow. This MUST be in the form of a URL. */
  authorizationUrl: Url;
}

/** Configuration for the OAuth Authorization Code flow. Previously called accessCode in OpenAPI 2.0. */
export interface AuthorizationCodeOAuthFlow extends OAuth2Flow {
  /** The authorization URL to be used for this flow. This MUST be in the form of a URL. */
  authorizationUrl: Url;

  /** The token URL to be used for this flow. This MUST be in the form of a URL. */
  tokenUrl: Url;
}

/** OpenIdConnect SecurityScheme */
export interface OpenIdConnectSecurityScheme extends SecuritySchemeBase {
  /** OpenID Connect */
  type: SecurityType.OpenIdConnect;

  /** OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. */
  openIdConnectUrl: Url;
}
